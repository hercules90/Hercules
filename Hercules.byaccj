%{
	import java.io.*;
	import java.util.*;
%}
%left RETURN '='
%left NOT
%right AND
%right OR
%left OP1
%right OP2
%left OP3
%left OP4
%left OP5
%left OP6
%left OP7
%token <sval> LITERAL,BINOP7,BINOP6,BINOP5,BINOP4,BINOP3,BINOP2,BINOP1,NAME
%token IF,ELSE,ELSEIF,WHILE,VAR
%token RETURN,AND,OR,NOT
%type <sval> op
%%

start
	:	{ emit("\""+name+".mexe\" = main in\n!{{"); }
		program
		{ emit("}}*BASIS;"); }
	;

program
	:	program function
	|	function
	;	

function 
	: 	NAME '('
		{	
			varCount = 0;
			varTable=new HashMap<String,Integer>();
		} 
		names ')'
	 	{
			emit("#\"" + $1 + "[f" + varCount + "]\" = "); 
			emit("[");
		}
		'{'
			decls 
			exprs 
		'}'
		{
			emit("(Return)");
			emit("];");
		}
	;

names 	
	:	non_empty_names
	|
	;

non_empty_names
	:	NAME {addVar($1);} ',' non_empty_names
	|	NAME {addVar($1);}
	;

decls 
	:	VAR non_empty_names ';' decls
	| 
	;

exprs
	:	expr ';' exprs 
	|
	;
	
expr
	:	NOT expr
		{
			emit("(Not)");
		}
	|	expr BINOP1
		{
			emit("(StoreArgAcc " + tmpPos-- +" 0)");
		}
		expr
		{
			emit("(StoreArgAcc " + ++tmpPos +" 1)");
			emit("(Call #\"" + $2 + "[f2]\" " + tmpPos + " )" );
		}
	|	expr BINOP2
		{
			emit("(StoreArgAcc " + tmpPos-- +" 0)");
		}
		expr
		{
			emit("(StoreArgAcc " + ++tmpPos +" 1)");
			emit("(Call #\"" + $2 + "[f2]\" " + tmpPos + " )" );
		}
	|	expr BINOP3
		{
			emit("(StoreArgAcc " + tmpPos-- +" 0)");
		}
		expr
		{
			emit("(StoreArgAcc " + ++tmpPos +" 1)");
			emit("(Call #\"" + $2 + "[f2]\" " + tmpPos + " )" );
		}
	|	expr BINOP4
		{
			emit("(StoreArgAcc " + tmpPos-- +" 0)");
		}
		expr
		{
			emit("StoreArgAcc " + ++tmpPos +" 1)");
			emit("Call #\"" + $2 + "[f2]\" " + tmpPos + " )" );
		}
	|	expr BINOP5
		{
			emit("(StoreArgAcc " + tmpPos-- +" 0)");
		}
		expr
		{
			emit("(StoreArgAcc " + ++tmpPos +" 1)");
			emit("(Call #\"" + $2 + "[f2]\" " + tmpPos + " )" );
		}
	|	expr BINOP6
		{
			emit("(StoreArgAcc " + tmpPos-- +" 0)");
		}
		expr
		{
			emit("(StoreArgAcc " + ++tmpPos +" 1)");
			emit("(Call #\"" + $2 + "[f2]\" " + tmpPos + " )" );
		}
	|	expr BINOP7
		{
			emit("(StoreArgAcc " + tmpPos-- +" 0)");
		}
		expr
		{
			emit("(StoreArgAcc " + ++tmpPos +" 1)");
			emit("(Call #\"" + $2 + "[f2]\" " + tmpPos + " )" );
		}
	|	expr AND
		{
			int lab = newLabel();
			emit("(GoFalse _" + lab + ")");
		}
		expr
		{
			int lab = pop();
			emit("_" + lab + ":");
		}
	|	expr OR
		{
			int lab = newLabel();
			emit("(GoTrue _" + lab + ")");
		}
		expr
		{
			int lab = pop();
			emit("_" + lab + ":");
		}
	|	smallexpr
	|	NAME '=' expr {emit("(Store " + findVar($1) + ")");} 
	|	RETURN expr
		{
			emit("(Return)");
		}
	;

smallexpr
	:	op smallexpr
		{
			emit("(StoreArgAcc " + tmpPos + " 0)");
			emit("(Call #\"" + $1 + "[f1]\" " + tmpPos + ")");
		}
	|	WHILE
		{
			int start = newLabel();
			push(start);
			emit("_" + start + ":");
		}
		expr
		{
			int end = newLabel();
			emit("(GoFalse _" + end + ")" );
		}
		body
		{
			int end = pop();
			int start = pop();
			emit("(Go _" + start + ")");
		}
	|	IF expr
	 	{
			push(elseLab);
			push(endifLab);
			elseLab = newLabel();
			endifLab = newLabel();
			emit("(GoFalse _" + elseLab + ")");
		}
 		body
 		{
			emit("(Go _" + endifLab + ")" );
		}
		ifrest
		{
			emit("_" + endifLab +":");
			endifLab = pop(); 
			elseLab = pop();
		}
	|	LITERAL
	 	{
			emit("(MakeVal " + $1 + ")");
		}	
	|	NAME
		{
			emit("(Fetch " + findVar($1) + ")");
		}
	|	NAME '('
		{
			push(argCount);
			argCount = 0;
			tmpPos--;
		} 
		args ')'
		{
			tmpPos++;
			emit("(Call #\"" + $1 + "[f" + argCount + "]\" " + tmpPos + ")");
			argCount = pop();
		} 
	|	'(' expr ')'
	;

op
	: OP1
	| OP2
	| OP3
	| OP4
	| OP5
	| OP6
	| OP7
	;

body 
	: '{' exprs  '}' ;


ifrest 
	:	ELSEIF
	  	{
			emit("_" + elseLab + ":" );
		}
		expr
		{
			elseLab = newLabel();
			emit("(GoFalse _" + elseLab + ")");
		}
		body 
		{
			emit("(Go _" + endifLab + ")" );
		}
		ifrest 
	| 	ELSE
		{
			emit("_" + elseLab + ":" );
		}
		body  
	| 	{emit("_" + elseLab + ":" );}
	;

args : non_empty_args 
	|  
	;

non_empty_args : arg ',' non_empty_args
 	| arg ;

arg : 	expr
		{
			emit("(StoreArgAcc " + (tmpPos+1) + " " + argCount + ")");
			argCount++;
		}
	;


%%

	static private String name;
	private HerculesLexer lexer;
	private int varCount;
	private HashMap<String,Integer> varTable;
	private int tmpPos = -1;
	private int nextLabel = 1;
	private int argCount = 0;
	private int argPos = 0;
	private int elseLab = 0;
	private int endifLab = 0;
	
	static class Link
	{
		int val;
		Link next;
		public Link( int n, Link l )
		{
			val = n;
			next = l;
		}
	}
	Link stack = null;

	private int pushTemp()
	{
		return tmpPos--;
	}

	private void popTemp()
	{
		tmpPos++;
	}

	private int newLabel()
	{
		return nextLabel++;
	}

	private void push( int n )
	{
		stack = new Link(n,stack);
	}

	private int pop()
	{
		int res = stack.val;
		stack = stack.next;
		return res;
	}

	private void addVar( String name )
	{
		if( varTable.get(name) != null )
			yyerror("Variable already exists");
		varTable.put(name,varCount++);
	}

	private int findVar( String name )
	{
		Integer res = varTable.get(name);
		if( res == null )
			yyerror("Variable does not exist");
		return res;
	}

	private int yylex()
	{
		int yyl_return = -1;
		try
		{
			yylval = null;
			yyl_return = lexer.yylex();
			if( yylval==null )
				yylval = new HerculesParserVal(HerculesParser.yyname[yyl_return]);
			//System.out.println("Token: "+HerculesParser.yyname[yyl_return]+" Lexeme: "+yylval.sval);
		}
		catch (IOException e)
		{
			System.err.println("IO error: "+e);
		}
		return yyl_return;
	}

	public void yyerror( String error )
	{
		System.err.println("Error:  "+error);
		System.err.println("Line:   "+lexer.getLine());
		System.err.println("Column: "+lexer.getColumn());
		System.exit(1);
	}

	public HerculesParser( Reader r )
	{
		lexer = new HerculesLexer(r,this);
	}

	public static void main( String args[] )
	  	throws IOException
	{
		HerculesParser yyparser = new HerculesParser(new FileReader(args[0]));
		name = args[0].substring(0,args[0].lastIndexOf('.'));
		yyparser.yyparse();
	}

	public void emit( String s )
	{
		System.out.println(s);
	}