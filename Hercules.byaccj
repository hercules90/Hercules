%{
	import java.io.*;
	import java.util.*;
%}

%token <sval> OP,DOUBLE,NAME,DIGIT,FUN,LITERAL
%token IF,ELSE,ELSEIF,WHILE,VAR
%token RETURN,AND,OR,NOT

%%

start
	:	{ emit("\""+name+".mexe\" = main in\n!{{"); }
		program
		{ emit("}}*BASIS;"); }
	;

program
	:	program function
	|	function
	;

names 	
	:	non_empty_names
	|
	;		

non_empty_names
	:	NAME {addVar($1);}
	|	NAME {addVar($1);} ',' non_empty_names
	;

function 
	: 	NAME '(' {varCount = 0;varTable=new HashMap<String,Integer>();} 
	names ')' {emit("#\"" + $1 + "[f" + varCount + "]\" = "); 
	emit("["); }
	'{'
		decls 
		exprs 
	'}'
	{emit("(Return)"); emit("];");}
	;

decls 
	:	decl decls 
	| 
	;

decl
	:	VAR non_empty_names ';' 
	;

exprs
	:	expr ';'  exprs 
	|	expr ';'
	;

expr 
	:	NAME '=' expr {emit("(Store " + findVar($1) + ")");} 
	|	RETURN expr
	|	or_expr
	;

or_expr 
	:	or_expr OR and_expr 
	|	and_expr
	;

and_expr 
	:	and_expr AND not_expr
	|	not_expr
	;

not_expr 
	:	NOT not_expr 
	|	op_expr
	; 

/*(Call #"+[f2]" - tmpPos);	Muna að incrementa og decrementa tmpPos*/
op_expr 
	:	op_expr OP {} small_expr {}
	|	small_expr
	;

small_expr 
	:	NAME {emit("(Fetch " + findVar($1) + ")");}
    |	NAME '(' { push(argCount); argCount = 0;tmpPos--;  }  args ')'{ tmpPos++; emit("(Call #\"" + $1 + "[f" + argCount + "]\" " + tmpPos + ")"); argCount = pop(); } 
	|	OP small_expr	/* einundaraðgerð */
	|	LITERAL {emit("(MakeVal " + $1 + ")");}	 	
	| 	'(' expr ')'
	|	IF expr {push(elseLab);push(endifLab); elseLab = newLabel(); endifLab = newLabel(); emit("(GoFalse _" + elseLab + ")");}
 		body {emit("(Go _" + endifLab + ")" );} ifrest {emit("_" + endifLab +":"); endifLab = pop(); elseLab = pop(); } 
	|	WHILE expr body
 	;

body 
	: '{' exprs  '}' ;


ifrest 
	: ELSEIF {emit("_" + elseLab + ":" );} expr {elseLab = newLabel(); emit("(GoFalse _" + elseLab + ")");} body {emit("(Go _" + endifLab + ")" );} ifrest 
	| ELSE {emit("_" + elseLab + ":" );} body  
	| {emit("_" + elseLab + ":" );}
	;



args : non_empty_args 
	|  
	;

non_empty_args : arg ',' non_empty_args | arg ;

arg : expr {emit("(StoreArgAcc " + (tmpPos+1) + " " + argCount + ")"); argCount++; }
	;


%%

	static private String name;
	private HerculesLexer lexer;
	private int varCount;
	private HashMap<String,Integer> varTable;
	private int tmpPos = -1;
	private int nextLabel = 1;
	private int argCount = 0;
	private int argPos = 0;
	private int elseLab = 0;
	private int endifLab = 0;
	
	static class Link
	{
		int val;
		Link next;
		public Link( int n, Link l )
		{
			val = n;
			next = l;
		}
	}
	Link stack = null;

	private int pushTemp()
	{
		return tmpPos--;
	}

	private void popTemp()
	{
		tmpPos++;
	}

	private int newLabel()
	{
		return nextLabel++;
	}

	private void push( int n )
	{
		stack = new Link(n,stack);
	}

	private int pop()
	{
		int res = stack.val;
		stack = stack.next;
		return res;
	}

	private void addVar( String name )
	{
		if( varTable.get(name) != null )
			yyerror("Variable already exists");
		varTable.put(name,varCount++);
	}

	private int findVar( String name )
	{
		Integer res = varTable.get(name);
		if( res == null )
			yyerror("Variable does not exist");
		return res;
	}

	private int yylex()
	{
		int yyl_return = -1;
		try
		{
			yylval = null;
			yyl_return = lexer.yylex();
			if( yylval==null )
				yylval = new HerculesParserVal(HerculesParser.yyname[yyl_return]);
			//System.out.println("Token: "+HerculesParser.yyname[yyl_return]+" Lexeme: "+yylval.sval);
		}
		catch (IOException e)
		{
			System.err.println("IO error: "+e);
		}
		return yyl_return;
	}

	public void yyerror( String error )
	{
		System.err.println("Error:  "+error);
		System.err.println("Line:   "+lexer.getLine());
		System.err.println("Column: "+lexer.getColumn());
		System.exit(1);
	}

	public HerculesParser( Reader r )
	{
		lexer = new HerculesLexer(r,this);
	}

	public static void main( String args[] )
	  	throws IOException
	{
		HerculesParser yyparser = new HerculesParser(new FileReader(args[0]));
		name = args[0].substring(0,args[0].lastIndexOf('.'));
		yyparser.yyparse();
	}

	public void emit( String s )
	{
		System.out.println(s);
	}